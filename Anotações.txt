yarn init -y => cria o package.json, que seria um arquivo descritor de projeto, sem receber perguntas sobre qual versão do projeto que será inicializada, 
                módulo principal, nome, etc (OBS: instalar yarn com comando npm i -g yarn)

yarn add nomePacote => instala um pacote na pasta atual, como também será criada a pasta node_modules dentro dela.

ts-node-dev é uma biblioteca que realiza tradução automática do código JavaScript em TypeScript no ambiente de desenvolvimento

Documentação sobre ORM para TypeScript: https://typeorm.io

yarn typeorm migration:create -n NomeMigration => Gera uma migration com todo o histórico de configuração do banco de dados
yarn typeorm migration:run => Executa todas as migrations que estiverem na aplicação
yarn typeorm migration:revert => Executa somente a última migration que estiver na aplicação
yarn test => inicia teste (seja unitário, de integração, E2E, etc)

visualizando o banco SQLite: beekeperstudio.io



Testes automatizados

1- Testes unitários => Testes que irão realizar teste a alguma funcionalidade, serviço ou uma função específica na aplicação

2- Teste de integração => Será testado uma funcionalidade completa na aplicação

=> request -> routes -> controller -> repository
<- repository <- controller <- response <=

3- Ponta a ponta (End to End) => Testar toda a ação do usuário numa aplicação (eventos), comuns em aplicações front-end

Ferramenta de teste de integração: supertest da NPM


Dicas de execução de comandos para definir variáveis de ambiente: instalar cross-env https://www.npmjs.com/package/cross-env


Nodemailer: biblioteca de envio de e-mails do node. Deve ser feito em conjunto com SMTP da Ethereal

Biblioteca para validações de API: yup valitation